@page "/notebook/index"

<PageTitle>Notebook</PageTitle>

<div class="row mt-4">
    <div class="col">
        <label class="form-label display-6">New Note</label>
        <div class="input-group mb-3">
            <textarea class="form-control" placeholder="write something.." aria-label="write something.." aria-describedby="button-addon2" rows="2" @bind="_newText"></textarea>
            <button class="btn btn-primary" type="button" id="button-addon2" @onclick="AddNew">Save</button>
        </div>
    </div>
</div>

<div class="row mt-4">
    @foreach (var item in _notes)
    {
        <div class="col-4 mb-3 d-flex align-items-stretch">
            <div class="card flex-fill text-bg-@item.Color">
                <div class="card-body">
                    @if (item.IsEditing)
                    {
                        <textarea class="form-control form-control-sm" placeholder="write something.." style="height:100%" @bind="_editText"></textarea>
                    }
                    else
                    {
                        <p class="card-text">@item.Text</p>
                    }
                </div>
                @if (item.IsEditing)
                {
                    <div class="card-footer text-muted text-end">
                        <button class="btn text-success btn-sm" type="button" @onclick=@(() => Save(item.Id))><i class="fa fa-check me-2"></i>Save</button>
                        <button class="btn text-danger btn-sm" type="button" @onclick=@(() => item.IsEditing = false)><i class="fa fa-times me-2"></i>Cancel</button>
                    </div>
                }
                else if (item.IsDeleting)
                {
                    <div class="card-footer text-muted text-end">
                        <button class="btn text-danger btn-sm" type="button" @onclick=@(() => Remove(item.Id))><i class="fa fa-trash me-2"></i>Yes, i want to delete.</button>
                        <button class="btn text-secondary btn-sm" type="button" @onclick=@(() => item.IsDeleting = false)><i class="fa fa-times me-2"></i>Cancel</button>
                    </div>
                }
                else
                {
                    <div class="card-footer text-muted text-end">
                        <EditOption CurrentColor="@item.Color" EditAction="@((action) => DoAction(action, item.Id))" />
                        <ColorPalette CurrentColor="@item.Color" ColorChanged="@((color) => item.Color = color)" />
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .btn-group-vertical > .btn, .btn-group > .btn {
        font-size: 10px;
        padding: 2px 3px;
    }
</style>


@code {
    private string _newText;
    private string _editText;
    private List<Note> _notes;

    protected override Task OnInitializedAsync()
    {
        _notes = new List<Note>();

        for (int i = 0; i < 6; i++)
        {
            _notes.Add(new Note
                {
                    Id = Guid.NewGuid(),
                    Text = TextData.GetSentences(NumberData.GetNumber(1, 3))
                });
        }

        return base.OnInitializedAsync();
    }

    public void DoAction(string action, Guid id)
    {
        switch (action)
        {
            case "edit":
                EditItem(id);
                break;

            case "delete":
                DeleteItem(id);
                break;

            default:
                break;
        }
    }

    public void EditItem(Guid id)
    {
        Note item = _notes.Find(x => x.Id == id);
        item.IsDeleting = false;
        item.IsEditing = true;
        _editText = item.Text;
    }

    public void DeleteItem(Guid id)
    {
        Note item = _notes.Find(x => x.Id == id);
        item.IsDeleting = true;
        item.IsEditing = false;
    }

    public void Save(Guid id)
    {
        Note item = _notes.Find(x => x.Id == id);
        item.IsEditing = false;
        item.Text = _editText;
        _editText = "";
    }

    public void Remove(Guid id)
    {
        Note item = _notes.Find(x => x.Id == id);
        _notes.Remove(item);
    }

    public void AddNew()
    {
        _notes.Add(new Note
            {
                Text = _newText
            });
    }
}
